{"version":3,"file":"pages/books/books.js","sources":["webpack:///./src/pages/books/books.jsx","webpack:///./src/pages/books/books.jsx?eaaa","webpack:///./src/pages/books/style.scss"],"sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport {\r\n  usePageScroll,\r\n  useReachBottom,\r\n} from '@tarojs/taro'\r\nimport {\r\n  View,\r\n  Button,\r\n  Text,\r\n  Picker,\r\n  ScrollView,\r\n  Image\r\n} from '@tarojs/components'\r\n\r\nimport './style.scss'\r\nimport {\r\n  QfSearch,\r\n  QfScrollView,\r\n  QfNoData,\r\n  QfBookCard\r\n} from '@/components'\r\nimport { fetchBookList } from '../../utils/api'\r\n\r\nexport default props => {\r\n\r\n  const [cates, setCates] = useState([\r\n    { id: 0, cate: '', c_zh: '推荐' },\r\n    { id: 1, cate: 'story', c_zh: '现实小说' },\r\n    { id: 2, cate: 'films', c_zh: '影视原著' },\r\n    { id: 3, cate: 'emotion', c_zh: '情感小说' },\r\n    { id: 4, cate: 'suspense', c_zh: '悬疑恐怖' },\r\n    { id: 5, cate: 'fantasy', c_zh: '玄幻精品' },\r\n    { id: 6, cate: 'science', c_zh: '科幻经典' },\r\n    { id: 7, cate: 'money', c_zh: '经济理财' }\r\n  ])\r\n  // loaded表示当前筛选条件下的数据是否已加载完，它与res.total有关\r\n  const [loaded, setLoaded] = useState(false)\r\n  // list用于渲染图书列表\r\n  const [list, setList] = useState([])\r\n  // 两种布局的临界点，当flag为flase时，品类组件ScrollView占文档流，反之是fixed定位的\r\n  const [flag, setFlag] = useState(false)\r\n  // filter是所有列表查询条件，当filter变化时触发useEffect调接口\r\n  const [filter, setFilter] = useState({\r\n    page: 1,\r\n    cate: '',\r\n    size: 2\r\n  })\r\n\r\n  // 调接口：如果page=1覆盖list，反之向list中追加数据实现分页\r\n  const init = ()=> {\r\n    if(!loaded) {\r\n      fetchBookList(filter).then(res=>{\r\n        console.log('图书列表', res)\r\n        // 如果是page发生变化，应该是向list中追加新一页的数据\r\n        // 如果是其它筛选字段发生变化，应该是覆盖list\r\n        let newList = []\r\n        if(filter.page===1) {\r\n          newList = res.list\r\n        }else{\r\n          newList = [...list, ...res.list]\r\n        }\r\n        setLoaded(res.total===newList.length)\r\n        setList(newList)\r\n      })\r\n    }\r\n  }\r\n  // 恢复到页面交互操作之前的默认状态\r\n  const reset = ()=> {\r\n    setList([])\r\n    setLoaded(false)\r\n  }\r\n\r\n  // 初始化调接口、实现筛选功能\r\n  useEffect(()=>{\r\n    init()\r\n  }, [filter])\r\n\r\n  // 功能1：品类筛选\r\n  const cateChange = e => {\r\n    console.log('e', e)\r\n    const newFilter = JSON.parse(JSON.stringify(filter))\r\n    newFilter.cate = e.cate\r\n    newFilter.page = 1\r\n    setFilter(newFilter)\r\n    reset()\r\n  }\r\n  // 功能2：分页查询\r\n  useReachBottom(()=>{\r\n    console.log('到底了')\r\n    if(!loaded) {\r\n      const newFilter = JSON.parse(JSON.stringify(filter))\r\n      newFilter.page++\r\n      setFilter(newFilter)\r\n    }\r\n  })\r\n\r\n  // 功能3：监听滚动条的滚动距离\r\n  usePageScroll(res=>{\r\n    // console.log('scrollTop', res.scrollTop)\r\n    setFlag(res.scrollTop>=190)\r\n  })\r\n\r\n  // 列表渲染\r\n  const renderBookList = ()=>{\r\n    return list.map(ele=>(\r\n      <View className='row' key={ele._id}>\r\n        <View className='left'>\r\n          <Image src={'http://localhost:8888'+ele.img} />\r\n        </View>\r\n        <View className='right'>\r\n          <View className='book'>{ele.book_name}</View>\r\n          <View className='author'>\r\n            <Text>{ele.author} | 推荐值 {ele.recommended_value}%</Text>\r\n          </View>\r\n          <View className='desc'>{ele.desc}</View>\r\n        </View>\r\n      </View>\r\n    ))\r\n  }\r\n\r\n  return (\r\n    <View className='qf-books' style={{paddingTop:flag?'180rpx':'100rpx'}}>\r\n\r\n      {/* 搜索框 */}\r\n      <View className='fixed-search'>\r\n        <QfSearch disabled />\r\n      </View>\r\n\r\n      {/* 读书卡 */}\r\n      <QfBookCard />\r\n\r\n      {/* 品类筛选 */}\r\n      <View\r\n        className='fixed-scroll'\r\n        style={{position:flag?'fixed':'static'}}>\r\n        <QfScrollView\r\n          data={cates}\r\n          value={filter.cate}\r\n          valueName='cate'\r\n          label='c_zh'\r\n          onChange={e=>cateChange(e)}\r\n        />\r\n      </View>\r\n\r\n      {/* 图书列表 */}\r\n      { renderBookList() }\r\n\r\n      {/* 没有数据了 */}\r\n      <QfNoData show={loaded} />\r\n    </View>\r\n  )\r\n}\r\n","import { createPageConfig } from '@tarojs/runtime'\nimport component from \"../../../node_modules/_babel-loader@8.0.6@babel-loader/lib/index.js!./books.jsx\"\nvar config = {\"navigationBarTitleText\":\"书城\",\"enablePullDownRefresh\":false};\n\n\nvar inst = Page(createPageConfig(component, 'pages/books/books', {root:{cn:[]}}, config || {}))\n\n","// extracted by mini-css-extract-plugin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAIA;AASA;AACA;AAMA;;;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AARA;AAAA;AAAA;AACA;AACA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AAXA;AAaA;AAzCA;AACA;AACA;AA0CA;AACA;AACA;AA9CA;AACA;AACA;AAgDA;AACA;AADA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AA7DA;AACA;AACA;AA8DA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAtEA;AACA;AAyEA;AACA;AACA;AA5EA;AACA;AA+EA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AADA;AAGA;AAAA;AAAA;AALA;AAJA;AADA;AADA;AACA;AAgBA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AADA;AASA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAHA;AAgBA;AAAA;AA3BA;AAlGA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;;;;A","sourceRoot":""}